# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account implements Node {
  _id: ID!
  amount: Float
  createdAt: DateTimeISO
  number: String!
  owner: User!
}

type AccountConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type AccountEdge {
  cursor: String!
  node: Account!
}

type Company implements Node {
  _id: ID!
  createdAt: DateTimeISO
  name: String!
}

type CompanyConnection {
  edges: [CompanyEdge!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type CompanyEdge {
  cursor: String!
  node: Company!
}

input CreateCompanyArgs {
  name: String!
}

input CreateTransactionArgs {
  amount: Float!
  fromAccountNumber: String!
  toAccountNumber: String!
}

input CreateUserArgs {
  email: String!
  name: String!
  password: String!

  """"""
  role: UserRoleEnum
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input LoginArgs {
  email: String!
  password: String!
}

type LoginResponse {
  token: String
  user: User
}

type Mutation {
  createAccount: Account!
  createCompany(input: CreateCompanyArgs!): Company!
  createTransaction(input: CreateTransactionArgs!): Transaction!
  createUser(input: CreateUserArgs!): User!
  deleteAccount(id: String!): Account!
  deleteCompany(id: String!): Company!
  login(input: LoginArgs!): LoginResponse!
  updateAccount(input: UpdateAccountArgs!): Account!
  updateCompany(input: UpdateCompanyArgs!): Company!
  updateUser(input: UpdateUserArgs!): User!
}

interface Node {
  _id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

type Query {
  getAccount(number: String!): Account!
  getCompany(id: String!): Company!
  getUser(id: String!): User!
  listAccounts(after: String, before: String, first: Float = 10, last: Float, name: String): AccountConnection!
  listCompanies(after: String, before: String, first: Float = 10, last: Float, name: String): CompanyConnection!
  listTransactions(after: String, before: String, first: Float = 10, last: Float, number: String): TransactionConnection!
  listUsers(after: String, before: String, company_id: ID, email: String, first: Float = 10, last: Float, name: String, role: UserRoleEnum): UserConnection!
}

type Transaction implements Node {
  _id: ID!
  amount: Float!
  createdAt: DateTimeISO
  createdBy: User!
  fromAccount: Account!
  number: String!
  toAccount: Account!
}

type TransactionConnection {
  edges: [TransactionEdge!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type TransactionEdge {
  cursor: String!
  node: Transaction!
}

input UpdateAccountArgs {
  _id: ID!
  number: String
}

input UpdateCompanyArgs {
  _id: ID!
  name: String
}

input UpdateUserArgs {
  _id: ID!
  company: ID
  email: String
  name: String
  password: String

  """"""
  role: UserRoleEnum
}

type User implements Node {
  _id: ID!
  company: Company
  createdAt: DateTimeISO
  email: String!
  name: String!
  password: String!
  role: UserRoleEnum
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type UserEdge {
  cursor: String!
  node: User!
}

"""Roles of the user"""
enum UserRoleEnum {
  ADMIN
  DEFAULT
}